#!/usr/bin/env python3

import json
import sys
import re
from urllib.request import urlopen
import html

# Regex patterns to identify HTML tags and styles
link = re.compile(r'<a [^>]+>|</a>')
div = re.compile(r'<div [^>]+>|</div>')
spanstop = re.compile(r'</[A-Za-z0-9]+>')
# Modified to capture and ignore style attributes within span tags
span = re.compile(r'<span class="([^"]+)"(?: style="[^"]*background: url\([^)]+\)[^"]*")?>')

attribcols = {
    'Y': '33',   # yellow
    'G': '32',   # green
    'B': '34',   # blue
    'C': '36',   # cyan
    'W': '37',   # white
    'R': '30',   # red
    'bgY': '43', # background yellow
    'bgG': '42', # background green
    'bgB': '44', # background blue
    'bgC': '46', # background cyan
    'bgW': '47', # background white
    'bgR': '40', # background red
    'DH': '1',   # underline/double height
}

def replacecol(page, attribl):
    attribs = [x.strip() for x in attribl.split()]
    o = ''
    for attrib in attribs:
        if attrib in attribcols:
            o += '\x1b[' + attribcols[attrib] + 'm'
    # Replace the opening tag with the terminal color codes, ignoring inline styles
    page = re.sub(f'<span class="{attribl}"(?: style="[^"]*")?>', o, page)
    return page

def display(page):
    page = div.sub('', page)
    page = link.sub('', page)
    page = spanstop.sub('\x1b[0m', page)  # Reset terminal color/style at each closing tag
    for match in span.findall(page):
        page = replacecol(page, match)
    page = span.sub('', page)  # Remove the processed span tags
    o = ''
    for line in page.split('\n'):
        o += '\x1b[0m' + line + '\x1b[0m\n'  # Reset styles at the start and end of each line to prevent color spill-over
    o = html.unescape(o)
    sys.stdout.write(o)

def getttx(pages):
    url = "https://api.texttv.nu/api/get/" + pages + '?app=texttvpy'
    response = urlopen(url)
    data = json.loads(response.read().decode('utf-8'))
    for page in data:
        for subpage in page['content']:
            display(subpage)

if __name__ == '__main__':
    if len(sys.argv) > 1:
        for arg in sys.argv[1:]:
            getttx(arg)
    else:
        getttx('100')
